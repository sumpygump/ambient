#!/usr/bin/python3

#-----------------------------------------------------#
#       _              _     _                        #
#      / \   _ __ ___ | |__ (_) ___ _ __   ___ ___    #
#     / _ \ | '_ ` _ \| '_ \| |/ _ \ '_ \ / __/ _ \   #
#    / ___ \| | | | | | |_) | |  __/ | | | (_|  __/   #
#   /_/   \_\_| |_| |_|_.__/|_|\___|_| |_|\___\___|   #
#                                                     #
#-----------------------------------------------------#

import os
import sys
import fnmatch
import random
import pygame
from pygame.locals import *
from time import sleep

class AmbientSounds():
    """AmbientSounds class"""

    version = "1.0.4"

    # How long each sound should play (by itself)
    play_duration = 300

    # Number of ticks (seconds) for a fade
    fade_duration = 60 
    fade_ms = fade_duration*1000

    # Countdown timer for playing sound
    play_timer = 0

    # Storage of sound objects
    files = []
    sounds = []
    isplaying = []
    current_sound = 0

    def __init__(self):
        print("Ambience version", self.version)

        self.files = self.load_sound_files()

        # Prepopulate isplaying array
        for s in self.files:
            self.isplaying.append(False)

    def start(self):
        if len(self.files) == 0:
            print("No sound files to load!")
            pygame.quit()
            sys.exit(1)

        print("Playing sounds. Press Ctrl-C to exit.")
        print()

        # Load the first sound
        self.load_sound(self.current_sound)

        self.sounds[self.current_sound].play(-1, fade_ms=3000)
        self.isplaying[self.current_sound] = True
        self.play_timer = self.play_duration - (self.fade_duration / 2)

    def tick(self):
        #print("Current", self.current_sound, "Play:", self.play_timer)
        self.handle_play()

    def handle_play(self):
        if self.play_timer > 0:
            self.play_timer = self.play_timer - 1
            if self.play_timer == 10:
                # Load the next sound 10 ticks before we need to switch
                self.load_sound(self.get_next_sound())
        else:
            self.stop_sound(self.current_sound)
            self.start_next_sound()

    def start_next_sound(self):
        self.current_sound = self.get_next_sound()

        self.play_sound(self.current_sound)

    def get_next_sound(self):
        next_sound = self.current_sound + 1

        if (next_sound >= len(self.files)):
            next_sound = 0

        return next_sound

    def play_sound(self, index):
        self.sounds[index].play(-1, fade_ms=self.fade_ms)
        self.isplaying[index] = True
        self.play_timer = self.play_duration - (self.fade_duration / 2)

    def stop_sound(self, index):
        self.sounds[index].fadeout(self.fade_ms)
        self.isplaying[index] = False

    def end_fadeout(self):
        print()
        print("Stopping sounds...")
        self.sounds[self.current_sound].fadeout(3000)
        sleep(3)
        print("Goodbye.")

    def get_files(self, path):
        files = []
        for f in os.listdir(path):
            full = os.path.join(path, f)
            if os.path.isdir(full): files.extend(self.get_files(full)) # recurse
            if len(files) > 1000: break # break if we have enough
            if fnmatch.fnmatch(f, '*.ogg'): files.append(full)
            if fnmatch.fnmatch(f, '*.flac'): files.append(full)
        return files

    def load_sound_files(self):
        files = self.get_files(os.path.expanduser("."))
        random.shuffle(files)

        if len(files) == 0:
            return files

        print("Loaded sounds:")
        for file in files:
            print(" ", file)
        return files

    def load_sound(self, file_index):
        try:
            sound = self.sounds[file_index]
        except IndexError:
            self.sounds.append(pygame.mixer.Sound(self.files[file_index]))

def main():
    pygame.init()

    # This creates a timer event for the "tick" that will be passed to the
    # ambience class object. It is measured in milliseconds (1000 = 1 second)
    pygame.time.set_timer(USEREVENT + 1, 1000)

    ambience = AmbientSounds()
    ambience.start()

    # Event loop
    while True:
        try:
            for event in pygame.event.get():
                if event.type == USEREVENT + 1:
                    ambience.tick()
        except KeyboardInterrupt:
            ambience.end_fadeout()
            pygame.quit()
            sys.exit(0)

if __name__ == '__main__': main()
